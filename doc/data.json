{
    "project": {
        "name": "Websocket trading page UI",
        "description": "Description of trading page UI classes",
        "version": "0.1",
        "logo": "../resources/img/logo.png"
    },
    "files": {
        "lib/parsers/contracts.js": {
            "name": "lib/parsers/contracts.js",
            "modules": {},
            "classes": {
                "ContractsParser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/parsers/contracts_patched.js": {
            "name": "lib/parsers/contracts_patched.js",
            "modules": {},
            "classes": {
                "ContractsPatchedForCallput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/parsers/symbols.js": {
            "name": "lib/parsers/symbols.js",
            "modules": {},
            "classes": {
                "SymbolsParser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/utils/socket.js": {
            "name": "lib/utils/socket.js",
            "modules": {},
            "classes": {
                "Socket": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ContractsParser": {
            "name": "ContractsParser",
            "shortname": "ContractsParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/parsers/contracts.js",
            "line": 1,
            "description": "Class for parsing Websocket response for \"contracts_for\" request",
            "is_constructor": 1,
            "example": [
                "\n     let parsed_data = new ContractsParser(response.contracts_for.available);\n     let categories = parsed_data.getCategories();\n"
            ]
        },
        "ContractsPatchedForCallput": {
            "name": "ContractsPatchedForCallput",
            "shortname": "ContractsPatchedForCallput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/parsers/contracts_patched.js",
            "line": 1,
            "description": "Class patches ContractsParser class to process callput contracts as Rise/Fall and Higher/Lower",
            "is_constructor": 1
        },
        "SymbolsParser": {
            "name": "SymbolsParser",
            "shortname": "SymbolsParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/parsers/symbols.js",
            "line": 1,
            "description": "Class for parsing Websocket response for \"active_symbols\" request",
            "is_constructor": 1,
            "example": [
                "\n     let parsed_data = new SymbolsParser(response.active_symbols);\n     let opened_markets = parsed_data.getMarkets(1);"
            ]
        },
        "Socket": {
            "name": "Socket",
            "shortname": "Socket",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/utils/socket.js",
            "line": 1,
            "description": "Class for providing permanent websocket connection",
            "is_constructor": 1,
            "example": [
                "\n      \n      const socket = new Socket({\n         url: 'wss://ws.binaryws.com/websockets/v3',\n         check_timeout: 30, // Send ping request every 30 seconds\n         response_timeout: 10 // Consider request be failed if no response for 10 seconds\n      });\n\n      socket.request({\n          \"active_symbols\": \"brief\"\n      }).then((active_symbols) => {\n          processActive(active_symbols)\n      }).catch((error) => {\n          processError(error);\n      });\n      \n      socket.stream({\n          \"ticks\": \"R_50\"\n      }).then((tick) => {\n          processTick(active_symbols)\n      }).catch((error) => {\n          processError(error);\n      });\n        \n      socket.close();"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/parsers/contracts.js",
            "line": 20,
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "CONTRACTS",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 38,
            "itemtype": "method",
            "name": "_parse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "CONTRACTS",
                    "description": "",
                    "type": "List()"
                }
            ],
            "return": {
                "description": "TREE",
                "type": "Map()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 60,
            "itemtype": "method",
            "name": "_addDataToTree",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "TREE",
                    "description": "",
                    "type": "Map()"
                },
                {
                    "name": "CONTRACT",
                    "description": "",
                    "type": "Map()"
                }
            ],
            "return": {
                "description": "UPDATED_TREE",
                "type": "Map()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 103,
            "itemtype": "method",
            "name": "_completeDurations",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "DURATIONS",
                    "description": "",
                    "type": "Map()"
                }
            ],
            "return": {
                "description": "UPDATED_DURATIONS",
                "type": "Map()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 136,
            "description": "Returns categories List. List order is taken from /config.json",
            "itemtype": "method",
            "name": "getCategories",
            "return": {
                "description": "[\n           Map {\n               \"category\": \"callput\",\n               \"name\": \"Up/Down\"\n           }, ... ,\n           Map {\n               \"category\": \"spreads\",\n               \"name\": \"Spreads\"\n           }\n       ]",
                "type": "List()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 162,
            "description": "Returns durations List. List order is taken from /config.json",
            "itemtype": "method",
            "name": "getDurations",
            "params": [
                {
                    "name": "CATEGORY",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "START_TYPE,",
                    "description": "default \"spot\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[\n          Map {\n              \"min_duration\": \"5t\",\n              \"max_duration\": \"10t\",\n              \"value\": \"t\"\n          }, ... ,\n          Map {\n              \"min_duration\": \"1d\",\n              \"max_duration\": \"365d\",\n              \"barrier\": \"+1462.51\",\n              \"value\": \"d\"\n          }\n      ]",
                "type": "List()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 193,
            "description": "Returns expiryType List.",
            "itemtype": "method",
            "name": "getExpiryTypes",
            "params": [
                {
                    "name": "CATEGORY",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "START_TYPE,",
                    "description": "default \"spot\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[ \"duration\", \"end_date\"]",
                "type": "List()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts.js",
            "line": 216,
            "description": "Returns getStartTypes Map hash.",
            "itemtype": "method",
            "name": "getStartTypes",
            "params": [
                {
                    "name": "CATEGORY",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "{ \"spot\": 1, \"forward\": 1 }",
                "type": "Map()"
            },
            "class": "ContractsParser"
        },
        {
            "file": "lib/parsers/contracts_patched.js",
            "line": 14,
            "description": "Patches _addDataToTree to process callput contracts as Rise/Fall and Higher/Lower",
            "itemtype": "method",
            "name": "_addDataToTree",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "tree",
                    "description": "",
                    "type": "Map()"
                },
                {
                    "name": "contract",
                    "description": "",
                    "type": "Map()"
                }
            ],
            "return": {
                "description": "tree",
                "type": "Map()"
            },
            "class": "ContractsPatchedForCallput"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 19,
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "SYMBOLS",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 41,
            "itemtype": "method",
            "name": "_parse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "SYMBOLS",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "tree Map(), symbols Map()",
                "type": "Array"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 60,
            "itemtype": "method",
            "name": "_sortSymbolsList",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "SYMBOLS",
                    "description": "",
                    "type": "List()"
                }
            ],
            "return": {
                "description": "SYMBOLS",
                "type": "List()"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 85,
            "description": "Adds symbol to market/submarket tree.",
            "itemtype": "method",
            "name": "_addSymbolToTree",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "MARKETS",
                    "description": "",
                    "type": "Map()"
                },
                {
                    "name": "SYMBOL",
                    "description": "",
                    "type": "Map()"
                }
            ],
            "return": {
                "description": "matkets with symbol added",
                "type": "Map()"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 125,
            "description": "Adds symbol symbols Map()",
            "itemtype": "method",
            "name": "_addSymbolToList",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "SYMBOL_OBJ",
                    "description": "",
                    "type": "Map()"
                },
                {
                    "name": "SYMBOL",
                    "description": "",
                    "type": "Map()"
                }
            ],
            "return": {
                "description": "symbols Map() with symbol added",
                "type": "Map()"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 143,
            "description": "Returns ordered markets. Markets order is taken from /config.json",
            "itemtype": "method",
            "name": "getMarkets",
            "params": [
                {
                    "name": "ONLY_OPENED",
                    "description": "",
                    "type": "0|1"
                }
            ],
            "return": {
                "description": "[\n           Map({\n               market: 'random',\n               name: 'Randoms',\n               state: 1,\n               is_sub: 0\n           }),\n           ...,\n           Map({\n               market: 'random_index',\n               name: 'Indices',\n               state: 1,\n               is_sub: 1\n           })\n       ]",
                "type": "List()"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 186,
            "description": "Returns symbols for market.",
            "itemtype": "method",
            "name": "getSymbol",
            "params": [
                {
                    "name": "SYMBOL",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "SYMBOL details",
                "type": "Map"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 197,
            "description": "Returns symbols for market.",
            "itemtype": "method",
            "name": "getSymbols",
            "params": [
                {
                    "name": "MARKET",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[\n            Map({\n                \"symbol\": \"R_100\",\n                \"name\": \"Random 100 Index\",\n                \"state\": 1\n            }),\n            ....,\n            Map({\n                \"symbol\": \"R_25\",\n                \"name\": \"Random 25 Index\",\n                \"state\": 1\n            })\n       ]",
                "type": "List()"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 228,
            "description": "Returns first active symbol for market.",
            "itemtype": "method",
            "name": "getFirstActiveSymbol",
            "params": [
                {
                    "name": "MARKET",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "SYMBOL details",
                "type": "Map"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 245,
            "description": "Check if symbol exists and is active",
            "itemtype": "method",
            "name": "isSymbolActive",
            "params": [
                {
                    "name": "SYMBOL",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/parsers/symbols.js",
            "line": 256,
            "description": "Returns true if market exists and opened and false if not.",
            "itemtype": "method",
            "name": "isMarketOpened",
            "params": [
                {
                    "name": "MARKET",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "SymbolsParser"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 45,
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "params",
                    "description": "{\n     check_timeout: {Number},\n     response_timeout: {Number},\n     url: {String}\n}",
                    "type": "Object"
                }
            ],
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 61,
            "description": "Create WS connection and provides connection Promise",
            "itemtype": "method",
            "name": "_connect",
            "access": "private",
            "tagname": "",
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 97,
            "itemtype": "method",
            "name": "_reconnect",
            "access": "private",
            "tagname": "",
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 112,
            "description": "Returns connection promise",
            "itemtype": "method",
            "name": "_getConnection",
            "access": "private",
            "tagname": "",
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 121,
            "description": "Makes ws request and retruns answer in then() method and error in catch() method",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "REQUEST",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n      socket.request({\n          \"active_symbols\": \"brief\"\n      }).then((active_symbols) => {\n          processActive(active_symbols)\n      }).catch((error) => {\n          processError(error);\n      });"
            ],
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 156,
            "description": "Makes ws request for stream and retruns answer in then() method and error in catch() method",
            "itemtype": "method",
            "name": "stream",
            "params": [
                {
                    "name": "REQUEST",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n      socket.stream({\n          \"ticks\": \"R_50\"\n      }).then((tick) => {\n          processTick(active_symbols)\n      }).catch((error) => {\n          processError(error);\n      });"
            ],
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 233,
            "description": "Processes WS response message",
            "itemtype": "method",
            "name": "_processMessage",
            "access": "private",
            "tagname": "",
            "class": "Socket"
        },
        {
            "file": "lib/utils/socket.js",
            "line": 264,
            "description": "Closes connection",
            "itemtype": "method",
            "name": "close",
            "class": "Socket"
        }
    ],
    "warnings": []
}